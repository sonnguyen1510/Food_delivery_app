@page "/"

@using Database.MoneyManagerService

@using System.Net.Http; 
@using System.Net.Http.Json;


<head>
    <link rel="stylesheet" href="./css/Home.css">
</head>
<body>
    <div class="container">
        <div class="user-detail-container">
            <div class="user-avatar">
                <img src="user_default.png" />
            </div>
            <div class="user-detail">
                <p class="status-day">@DayStatus</p>
                <p class="user-name">@Username</p>
            </div>
            <div class="add-transaction" @onclick="addTransiaction"><img class="add-transaction-img" src="icons8-add-file-64.png" /></div>
        </div>

        <div class="transaction-display-container">
            <div class="display-transaction">
                <div class="display-transaction-detail">
                    <p style="color : white">Balance</p>
                    <p class="balance-display">$@Balance.ToString()</p>
                </div>
                <div>
                    <input @bind=CurrentMonth class="display-transaction-daypicker" type="month">
                </div>
            </div>
            <div class="income-expense-view">
                <div class="income-container">
                    <div class="income-info">
                        <div>
                            <p class="income-money title">Income</p>
                        </div>
                        <div class="income-amount">
                            <p class="number-style income-money">$@Income.ToString()</p>
                        </div>
                    </div>
                    <div>
                        <img src="up-arrow-svgrepo-com.svg" />
                    </div>
                </div>
                <div class="expense-container">
                    <div class="expense-info">
                        <div>
                            <p class="expense-money title">Expense</p>
                        </div>
                        <div class="expense-amount">
                            <p class="number-style expense-money">$@Expense.ToString()</p>
                        </div>
                    </div>
                    <div>
                        <img src="down-arrow-svgrepo-com.svg">
                    </div>
                </div>
            </div>
        </div>
        <div class="transaction-list-daypicker">
            <div class="">
                <p class="trans-title"> Transaction</p>
            </div>
            <div class="daypicker">
                <p class="daypicker-title">From</p>
                <input class="daypicker-dialog" type="date" @bind="selectedStartDate" @oninput="HandleStartDateChange" />
                <p class="daypicker-title">To</p>
                <input class="daypicker-dialog" type="date" @bind="selectedEndDate" @oninput="HandleEndDateChange" />
            </div>
        </div>
        <div class="transaction-list-container">
            
           <div class="transaction-list-display">
                @if (userTransactions != null)
                {
                    @foreach (var item in userTransactions)
                    {
                        <div class="transaction-item-container divider">
                            <div class="transaction-item-info-container">
                                <div class="transaction-icon-container">
                                    <div class="transaction-icon">
                                        <img src="@Icon(item.TransIcon)" />
                                    </div>
                                </div>
                                <div class="user-detail">
                                    <p class="user-name">@item.Title</p>
                                    <p class="status-day">@item.CreTime @item.CreDate?.ToString("yyyy-MM-dd")</p>
                                </div>
                            </div>
                             <div class="transaction-item-amount-container">
                                @if (item.TransType.Equals("income"))
                                {
                                    <div class="income-transaction-item-container">
                                        <p class="number-style income-money">$@item.Amount</p><img src="up-arrow-svgrepo-com-transitem.svg" />
                                        
                                    </div>
                                }
                                else
                                {
                                    <div class="expense-transaction-item-container">
                                        <p class="number-style expense-money">$@item.Amount</p>
                                        <img src="down-arrow-svgrepo-com-transitem.svg">
                                    </div>
                                }
                             </div>
                         </div>
                        
                    }
                }
            </div>

            
        </div>
    </div>
    <script src="Js/home.js"></script>
</body>

@code {
    private bool eventHandlerRegistered = false;
    public double Income = 5000;
    public double Expense = 2000;

    private DateTime selectedStartDate = DateTime.Now;
    private String selectedStringStartDate;
    public String Username = "Billy";
    public String DayStatus = "Morning";
    public double Balance = 7872.20;
    private DateTime CurrentMonth = DateTime.Now;
    private List<UserTransaction> userTransactions;
    HttpClient client = new HttpClient();

    /* Unmerged change from project 'FoodDelivery (net7.0-windows10.0.19041.0)'
        Before:
        private List<Connection.UserTransaction> data;
        After:
        private List<UserTransaction> data;




        private List<UserTransaction> TransactionList = new List<UserTransaction>();

    protected async override void OnInitialized()
    {
        TransactionList = await Task.Run(() => usertransactions.getAllTransactions());
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Attach the window resize event handler
            if (!eventHandlerRegistered)
            {
                eventHandlerRegistered = true;
                await JS.InvokeVoidAsync("registerWindowResizeHandler");
            }
        }
    }
    */
    // Inject the DbContext
    

    protected override async Task OnInitializedAsync()
    {
        // Define the API endpoint URL
        var apiUrl = "https://localhost:7040/transaction/GetAllTransaction";

        // Send an HTTP GET request to the API
        userTransactions = await client.GetFromJsonAsync<List<UserTransaction>>(apiUrl);
    }
    
    

    private string formattedMonth
    {
        get
        {
            return CurrentMonth.ToString("yyyy-MM");
        }
        set
        {
            if (DateTime.TryParse(value, out DateTime result))
            {
                CurrentMonth = result;
            }
        }
    }

    

    private void HandleStartDateChange(ChangeEventArgs e)
    {
        selectedStringStartDate = e.Value.ToString();
        selectedStartDate = (DateTime)e.Value;
    }


    private DateTime selectedEndDate = DateTime.Now;
    private String selectedStringEndDate;

    private void HandleEndDateChange(ChangeEventArgs e)
    {
        selectedStringEndDate = e.Value.ToString();
        selectedEndDate = (DateTime)e.Value;
    }

    public void addTransiaction()
    {
        
    }

    public String Icon(String iconType)
    {
        switch (iconType)
        {
            case "Food&Dring":
                return "Food&Dring.png";
            case "Bussiness":
                return "Bussiness.png";
            case "Excercise":
                return "Excercise.png";
            case "Health":
                return "Health.png";
            case "Learning":
                return "Learning.png";
            case "Money":
                return "Money.png";
            case "Movie":
                return "Movie.png";
            case "Salary":
                return "Salary.png";
            case "Shopping":
                return "Shopping.png";
            case "Bill":
                return "Bill.png";
            default :
                return null;

        }
    }
}
