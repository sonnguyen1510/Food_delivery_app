@page "/"
@page "/home"

@using BlazorAnimate;
@using CurrieTechnologies.Razor.SweetAlert2;
@using Database.MoneyManagerService

@using System.Net.Http; 
@using System.Net.Http.Json;
@using MoneyStatistic.Database.JSON;
@using MudBlazor

@inject SweetAlertService Swal;

<head>
    <link rel="stylesheet" href="./css/Home.css" />
    <link rel="stylesheet" href="./css/AddTransaction.css" />
</head>
<body>
    <div class="screen">
        <div class="container">
            <div class="user-detail-container">
                <div class="user-avatar">
                    <img src="user_default.png" />
                </div>
                <div class="user-detail">
                    <p class="status-day">@DayStatus</p>
                    <p class="user-name">@Username</p>
                </div>
                <div class="add-transaction" @onclick="addTransiaction"><img class="add-transaction-img" src="icons8-add-file-64.png" /></div>
            </div>

            <div class="transaction-display-container">
                <div class="display-transaction">
                    <div class="display-transaction-detail">
                        <p style="color : white">Balance</p>
                        <p class="balance-display">@Balance.ToString()$</p>
                    </div>
                    <div>
                        <input @bind=CurrentMonth class="display-transaction-daypicker" type="month">
                    </div>
                </div>
                <div class="income-expense-view">
                    <div class="income-container">
                        <div class="income-info">
                            <div>
                                <p class="income-money title">Income</p>
                            </div>
                            <div class="income-amount">
                                <p class="number-style income-money">@Income.ToString()$</p>
                            </div>
                        </div>
                        <div>
                            <img src="up-arrow-svgrepo-com.svg" />
                        </div>
                    </div>
                    <div class="expense-container">
                        <div class="expense-info">
                            <div>
                                <p class="expense-money title">Expense</p>
                            </div>
                            <div class="expense-amount">
                                <p class="number-style expense-money">@Expense.ToString()$</p>
                            </div>
                        </div>
                        <div>
                            <img src="down-arrow-svgrepo-com.svg">
                        </div>
                    </div>
                </div>
            </div>
            <div class="transaction-list-daypicker">
                <div class="">
                    <p class="trans-title"> Transaction</p>
                </div>
                
            </div>
            <div class="transaction-list-container">
                @if (userTransactions != null)
                {
                    @foreach (var item in userTransactions)
                    {
                        <div class="transaction-item-container divider" @onmousedown="()=>StartTimer(item)" @onmouseup="StopTimer">
                            <div class="transaction-item-info-container">
                                <div class="transaction-icon-container">
                                    <div class="transaction-icon">
                                        <img src="@Icon(item.TransIcon)" />
                                    </div>
                                </div>
                                <div class="user-detail">
                                    <p class="user-name">@item.Title</p>
                                    <p class="status-day">@item.CreTime @item.CreDate?.ToString("yyyy-MM-dd")</p>
                                </div>
                            </div>
                            <div class="transaction-item-amount-container">
                                @if (item.TransType.Equals("income"))
                                {
                                    <div class="income-transaction-item-container">
                                        <p class="number-style income-money">+@item.Amount$</p><img src="up-arrow-svgrepo-com-transitem.svg" />

                                    </div>
                                }
                                else
                                {
                                    <div class="expense-transaction-item-container">
                                        <p class="number-style expense-money">-@item.Amount$</p>
                                        <img src="down-arrow-svgrepo-com-transitem.svg">
                                    </div>
                                }
                            </div>
                        </div>

                    }
                }



            </div>
        </div>
    </div>
    <!-- Modal -->
    
    
    @if (showDialog)
    {
        <div class="modal">
            <div class="modal-title-container">
                <p class="modal-title">Add Transaction</p>
                <div class="modal-cancel-button-container">
                    <button class="modal-cancel-button" @onclick="CloseModal">Cancel</button>
                </div>
            </div>
            <div class="modal-content">

                <div class="modal-transaction-type-container">
                    @if (TransactionType.Equals("income"))
                    {
                        <button class="modal-transaction active" @onclick="SetIncome">Income</button>
                        <button class="modal-transaction inactive" @onclick="SetExpense">Expense</button>
                    }
                    else
                    {
                        <button class="modal-transaction inactive" @onclick="SetIncome">Income</button>
                        <button class="modal-transaction active" @onclick="SetExpense">Expense</button>
                    }
                </div>
                <div class="modal-daypicker-container">
                    <div class="modal-daypicker-button-container">
                        <div>
                            <h4 class="modal-daypicker-title">@currentDate.ToString("MMMM yyyy")</h4>
                        </div>
                        
                        <div>
                            <button class="modal-daypicker-button" @onclick="DecrementWeek"><img src="left-chevron-svgrepo-com.svg" /></button>
                            <button class="modal-daypicker-button" @onclick="IncrementWeek"><img src="right-chevron-svgrepo-com.svg" /></button>
                        </div>
                    </div>
                    <div class="modal-daypicker-divider"></div>
                    <div class="modal-daypicker-listofday">
                        @foreach (var day in GetOrderedDays(currentDate))
                        {
                            var weekDay = @day.DayOfWeek.ToString().Substring(0, 3);
                            if (weekDay.Equals("Sun") || weekDay.Equals("Sat"))
                            {
                                <div class="day-container">
                                    <div class="day-name"><p style="color :red ">@weekDay</p></div>
                                    <div class="daypicker-button-container">
                                        @if (day.Day != CurrentDay)
                                        {
                                            <button class="modal-daypicker-button white " @onclick = "()=>setDay(day.Day)">@day.Day</button>
                                        }
                                        else
                                        {
                                            <button class="modal-daypicker-button blue " @onclick="()=>setDay(day.Day)">@day.Day

                                            </button>
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="day-container">
                                    <div class="day-name"><p>@weekDay</p></div>
                                    <div class="daypicker-button-container">
                                        @if (day.Day != CurrentDay)
                                        {
                                            <button class="modal-daypicker-button white " @onclick = "()=>setDay(day.Day)"><h5>@day.Day</h5></button>
                                        }
                                        else
                                        {
                                            <button class="modal-daypicker-button blue " @onclick = "()=>setDay(day.Day)"><h5>@day.Day</h5></button>
                                        }
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
                <div class="modal-time-picker-container">
                    <div>
                        <p class="modal-transaction-information-title-size none-bold">Pick a time :</p>
                    </div>
                    <div class="modal-daypicker-timepicker">
                        <div class="time-picker">
                            <select @bind="selectedHour" class="hour">
                                @for (int i = 0; i < 24; i++)
                                {
                                    <option value="@i">@i.ToString("00")</option>
                                }
                            </select>
                            <p class="modal-daypicker-timepicker-sepreate-time">:</p>
                            <select @bind="selectedMinute" class="minute">
                                @for (int i = 0; i < 60; i += 5)
                                {
                                    <option value="@i">@i.ToString("00")</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
                <div class="modal-transaction-information-container">
                    <div>
                        @if (TransactionType.Equals("income"))
                        {
                            <p class="modal-transaction-information-title-size">Income title</p>
                        }
                        else
                        {
                            <p class="modal-transaction-information-title-size">Expense title</p>
                        }
                    </div>
                    <div class="modal-input-container">
                        <img class="modal-input-icon" src="heading-svgrepo-com.svg">
                        <input class="modal-transaction-input-field" type="text" @bind="TransactionTitle">
                    </div>
                    <div>
                        <p class="modal-transaction-information-title-size">Amount</p>
                    </div>
                    <div class="modal-input-container">
                        <img class="modal-input-icon" src="money-svgrepo-com.svg">
                        <input class="modal-transaction-input-field" type="number" @bind="TransactionAmount">
                    </div>
                    <div>
                        @if (TransactionType.Equals("income"))
                        {
                            <p class="modal-transaction-information-title-size">Income Category</p>
                        }
                        else
                        {
                            <p class="modal-transaction-information-title-size">Expense Category</p>
                        }
                    </div>
                    <div class="modal-category-list">
                        @if (TransactionType.Equals("income"))
                        {
                            @foreach (var item in IncomeCategory)
                            {
                                if (item.Equals(CategoryChoosed))
                                {
                                    <button @onclick="()=>pickCategory(item)" class="modal-category-button active">@item</button>
                                }
                                else
                                {
                                    <button @onclick="()=>pickCategory(item)" class="modal-category-button inactive">@item</button>
                                }
                            }
                        }
                        else
                        {
                            @foreach (var item in ExpenseCategory)
                            {
                                if (item.Equals(CategoryChoosed))
                                {
                                    <button @onclick="()=>pickCategory(item)" class="modal-category-button active">@item</button>
                                }
                                else
                                {
                                    <button @onclick="()=>pickCategory(item)" class="modal-category-button inactive">@item</button>
                                }
                            }
                        }
                    </div>
                    <div class="modal-input-container">
                        @if (TransactionType.Equals("income"))
                        {
                            <button class="add-transaction-submit-button active" @onclick="addTransaction">ADD INCOME</button>
                        }
                        else
                        {
                            <button class="add-transaction-submit-button active" @onclick="addTransaction">ADD EXPENSE</button>
                        }

                    </div>
                </div>
                <div>
                    
                </div>
            </div>
        </div>
    }
    <script src="_content/CurrieTechnologies.Razor.SweetAlert2/sweetAlert2.min.js"></script>
</body>

@code {
    private bool eventHandlerRegistered = false;
    public double Income = 5000;
    public double Expense = 2000;

    private DateTime selectedStartDate = DateTime.Now;
    private String selectedStringStartDate;
    public String Username = "Billy";
    public String DayStatus = "Good Morning";
    public double Balance = 7872.20;
    private DateTime CurrentMonth = DateTime.Now;
    private List<UserTransaction> userTransactions = null;
    HttpClient client = new HttpClient();
    private bool showDialog = false;

    //API
    private int PORT = 7040;

    /* Unmerged change from project 'FoodDelivery (net7.0-windows10.0.19041.0)'
    Before:
    private List<Connection.UserTransaction> data;
    After:
    private List<UserTransaction> data;

    <input class="modal-time-input" type="text" readonly="readonly" @bind="TransactionTimehour" @onclick="SetHours">
                        <p class="modal-daypicker-timepicker-sepreate-time">:</p>
                        <input class="modal-time-input" type="text" readonly="readonly" @bind="TransactionTimeMinutes" @onclick="SetMinutes">



    private List<UserTransaction> TransactionList = new List<UserTransaction>();

    protected async override void OnInitialized()
    {
    TransactionList = await Task.Run(() => usertransactions.getAllTransactions());
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
        {
        if (firstRender)
        {
        // Attach the window resize event handler
            if (!eventHandlerRegistered)
            {
            eventHandlerRegistered = true;
            await JS.InvokeVoidAsync("registerWindowResizeHandler");
    }
    }
    }
    */
    // Inject the DbContext


    protected override async Task OnInitializedAsync()
    {
        while (true)
        {
            try
            {
                // Define the API endpoint URL
                var apiUrl = $"https://localhost:{PORT}/transaction/GetAllTransaction";

                // Send an HTTP GET request to the API
                userTransactions = await client.GetFromJsonAsync<List<UserTransaction>>(apiUrl);
                break;
            }

            catch (Exception)
            {
                // Handle any other unexpected exceptions
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "The Internet?",
                        Text = "Can't connect to server, please try again!",
                        Icon = "question",

                    });
            }
        }
    }

    private async Task  ReloadTransactionList()
    {
        while(true){
            try
            {
                // Define the API endpoint URL
                var apiUrl = $"https://localhost:{PORT}/transaction/GetAllTransaction";

                // Send an HTTP GET request to the API
                userTransactions = await client.GetFromJsonAsync<List<UserTransaction>>(apiUrl);
                break;
            }

            catch (Exception)
            {
                // Handle any other unexpected exceptions
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Connect error?",
                        Text = "Can't connect to server, please try again!",
                        Icon = "question",

                    });
            }
        }
    }

    private async Task DeleteTransaction(UserTransaction item)
    {
        try{
            // Define the API endpoint URL
            var apiUrl = $"https://localhost:{PORT}/transaction/Delete/{item.Id}";

            // Post data to the server
            var response = await client.DeleteAsync(apiUrl);

            // Handle the response as needed
            if (response.IsSuccessStatusCode)
            {
                // Request was successful
                var result = await response.Content.ReadFromJsonAsync<Result>();
                await ReloadTransactionList();
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Success!",
                    Text = "This Transaction has been deleted!",
                    Icon = "success"
                });
                cleanAddList();
                // Handle the result
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "failed!",
                    Text = "Deleted fail!",
                    Icon = "error"
                });
                // Request failed
                // Handle the error
            }
        }
        catch (Exception)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Connect error?",
                    Text = "Can't connect to server, please try again!",
                    Icon = "question",

                });
        };
        
    }


    private string formattedMonth
    {
        get
        {
            return CurrentMonth.ToString("yyyy-MM");
        }
        set
        {
            if (DateTime.TryParse(value, out DateTime result))
            {
                CurrentMonth = result;
            }
        }
    }



    private void HandleStartDateChange(ChangeEventArgs e)
    {
        selectedStringStartDate = e.Value.ToString();
        selectedStartDate = (DateTime)e.Value;
    }


    private DateTime selectedEndDate = DateTime.Now;
    private String selectedStringEndDate;

    private void HandleEndDateChange(ChangeEventArgs e)
    {
        selectedStringEndDate = e.Value.ToString();
        selectedEndDate = (DateTime)e.Value;
    }

    public void addTransiaction()
    {
        showDialog = !showDialog;
        Console.WriteLine("Here");
    }

    public String Icon(String iconType)
    {
        switch (iconType)
        {
            case "Food&Dring":
                return "Food&Dring.png";
            case "Bussiness":
                return "Bussiness.png";
            case "Excercise":
                return "Excercise.png";
            case "Health":
                return "Health.png";
            case "Learning":
                return "Learning.png";
            case "Money":
                return "Money.png";
            case "Movie":
                return "Movie.png";
            case "Salary":
                return "Salary.png";
            case "Shopping":
                return "Shopping.png";
            case "Bill":
                return "Bill.png";
            default :
                return null;

        }
    }
    //DELETE TRANSACTION ITEM

    private System.Timers.Timer longClickTimer;
    private bool isLongClick;

    private void StartTimer(UserTransaction item)
    {
        isLongClick = false;
        longClickTimer = new System.Timers.Timer(1000); // Change the duration as needed
        longClickTimer.Elapsed += (sender, e) => OnLongClick(item);
        longClickTimer.Start();
    }

    private void StopTimer()
    {
        longClickTimer?.Stop();
        if (!isLongClick)
        {
            // Perform regular click action if not a long click
            // Add your regular click logic here

        }
    }

    private async void OnLongClick(UserTransaction item)
    {
        isLongClick = true;
        longClickTimer?.Stop();
        // Perform long click action
        // Add your long click logic here

        await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Would you like to delete this transaction ?",
                ShowConfirmButton = true,
                ShowCancelButton = true,
                ConfirmButtonText = "Delete",

                ConfirmButtonColor = "red",

            }).ContinueWith(async (swalTask) =>
                {
                SweetAlertResult result = swalTask.Result;
                if (!string.IsNullOrEmpty(result.Value))
                {
                    await DeleteTransaction(item);

                }
            });
    }

    public void Dispose()
    {
        longClickTimer?.Dispose();
    }

    //-MODAL

    private String TransactionType { get; set; } = "income";
    private String TransactionTitle { get; set; }="";
    private decimal TransactionAmount { get; set; } = 0;
    private String CategoryChoosed { get; set; } = "Bussiness";
    private int CurrentDay { get; set; } = DateTime.Now.Day;


    private int selectedHour { get; set; } = DateTime.Now.Hour;
    private int selectedMinute { get; set; } = DateTime.Now.Minute;

    private void CloseModal()
    {
        showDialog = !showDialog;

    }

    private void SetIncome()
    {
        TransactionType = "income";
        CategoryChoosed = "Bussiness";
    }

    private void SetExpense()
    {
        TransactionType = "expense";
        CategoryChoosed = "Food&Dring";
    }

    private DateTime currentDate = DateTime.Now;

    private IEnumerable<DateTime> GetOrderedDays(DateTime startDate)
    {
        var days = new List<DateTime>();
        while (startDate.DayOfWeek != DayOfWeek.Monday)
        {
            startDate = startDate.AddDays(-1);
        }

        for (int i = 0; i < 7; i++)
        {
            days.Add(startDate.AddDays(i));
        }

        return days;
    }

    private void setDay(int day)
    {
        CurrentDay = day;
    }

    private void IncrementWeek()
    {
        currentDate = currentDate.AddDays(7);
    }

    private void DecrementWeek()
    {
        currentDate = currentDate.AddDays(-7);
    }

    private void SelectDay(int day)
    {
        // Handle the selected day here
        CurrentDay = day;
    }

    private void SetHours()
    {

    }

    private void SetMinutes()
    {

    }

    //category

    private String[] IncomeCategory = { "Bussiness", "Salary", "Money" };

    private String[] ExpenseCategory = { "Food&Dring", "Health", "Excercise", "Bill", "Shopping", "Movie", "Learning" };



    private void pickCategory(String cate)
    {
        CategoryChoosed = cate;
    }

    private async void addTransaction()
    {
        
            try
            {
                // Create an instance of your data model
                var data = new UserTransactionBody
                    {
                        Title = TransactionTitle,
                        TransType = TransactionType,
                        TransIcon = CategoryChoosed,
                        CreTime = $"{selectedHour}:{selectedMinute}:00",
                        CreDate = $"{CurrentDay}-{currentDate.Month}-{currentDate.Year}",
                        Amount = TransactionAmount,
                        UserId = 2,
                        Status = true
                    };

                // Post data to the server
                var response = await client.PostAsJsonAsync<UserTransactionBody>("https://localhost:7040/transaction/AddTransaction", data);

                // Handle the response as needed
                if (response.IsSuccessStatusCode)
                {
                    // Request was successful
                    var result = await response.Content.ReadFromJsonAsync<Result>();
                    await ReloadTransactionList();
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Success!",
                            Text = "You clicked the button!",
                            Icon = "success"
                        });
                    cleanAddList();
                    // Handle the result
                }
                else
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "failed!",
                            Text = "Something went wrong!",
                            Icon = "error"
                        });
                    // Request failed
                    // Handle the error
                }
                
            }
            catch (Exception)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Connect error?",
                        Text = "Can't connect to server, please try again!",
                        Icon = "question",

                    });
            }
        
    }


    private void cleanAddList()
    {
        TransactionTitle = "";
        TransactionType = "income";
        CategoryChoosed = "Bussiness";
        selectedHour = DateTime.Now.Hour;
        selectedMinute = DateTime.Now.Minute;
        TransactionAmount = 0;
        CurrentDay = DateTime.Now.Day;
        currentDate = DateTime.Now;
    }
}
