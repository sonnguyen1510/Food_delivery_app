@page "/Analysis"

@using MoneyStatistic.Database.MoneyManagerService;
@using System.Net.Http;
@using System.Net.Http.Json;
@using MoneyStatistic.Database.JSON;
@using MoneyStatistic.Pages.Analysis.Object;
@using System;
@using System.Globalization;



@inject SweetAlertService Swal;

<head>
    <link rel="stylesheet" href="./css/Analysis.css" />
    <link rel="stylesheet" href="./css/Home.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css" integrity="sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css">

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />
</head>
<body>
    <div class="screen">
        <div class="container">
            <div class="transaction-type">
                @if (TransactionType.Equals("income"))
                {
                    <button class="transaction active" @onclick="SetIncome">Income</button>
                    <button class="transaction inactive" @onclick="SetExpense">Expense</button>
                }
                else
                {
                    <button class="transaction inactive" @onclick="SetIncome">Income</button>
                    <button class="transaction active" @onclick="SetExpense">Expense</button>
                }
            </div>
            <div class="transaction-analysis-container">
                <div>
                    <Chart @ref="barChart" Type="ChartType.Bar" TItem="double" Clicked="@OnClicked" />
                </div>
                <div class="transaction-container">
                    <div class="transaction-list-daypicker">
                        <div class="">
                            <p class="trans-title"> Transaction</p>
                        </div>

                    </div>
                    <div class="transaction-list-container-analysis">
                        @if (userTransactions != null)
                        {
                            @foreach (var item in userTransactions)
                            {
                                if (TransactionType.Equals("income"))
                                {
                                    if (item.TransType.Equals("income"))
                                    {
                                        <div class="transaction-item-container divider">
                                            <div class="transaction-item-info-container">

                                                <div class="user-detail">
                                                    <p class="user-name">@item.Title</p>
                                                </div>
                                            </div>
                                            <div class="transaction-item-amount-container">
                                                <div class="income-transaction-item-container">
                                                    <p class="number-style income-money">+$@item.Amount</p>

                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    if (item.TransType.Equals("expense"))
                                    {
                                        <div class="transaction-item-container divider">
                                            <div class="transaction-item-info-container">

                                                <div class="user-detail">
                                                    <p class="user-name">@item.Title</p>
                                                </div>
                                            </div>
                                            <div class="transaction-item-amount-container">
                                                <div class="expense-transaction-item-container">
                                                    <p class="number-style expense-money">-$@item.Amount</p>

                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="_content/CurrieTechnologies.Razor.SweetAlert2/sweetAlert2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.min.js" integrity="sha384-VHvPCCyXqtD5DqJeNxl2dtTyhF78xXNXdkwX1CZeRusQfRKp+tA7hAShOK/B/fQ2" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>
</body>

@code {
    private List<UserTransaction> userTransactions { get; set; } = null;

    private List<Transaction_byWeek> Transaction_data { get; set; } 

    HttpClient client = new HttpClient();
    private String TransactionType { get; set; } = "income";

    //API
    private int PORT = 7040;

    Chart<double> barChart;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await barChart.Clear();

        await barChart.AddLabelsDatasetsAndUpdate(Labels, GetBarChartDataset());
    }

    private BarChartDataset<double> GetBarChartDataset()
    {
        return new()
            {
                Label = $"{TransactionType} money",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                BorderWidth = 1
            };
    }

    string[] Labels = null;
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f)};
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f) };

    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<double> {
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),
            r.Next( 3, 50 ) * r.NextDouble(),};
    }

    Task OnClicked(ChartMouseEventArgs e)
    {
        var model = e.Model as BarChartModel;

        Console.WriteLine($"Handling event for {nameof(BarChartModel)}: x:{model.X} y:{model.Y}");
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        while (true)
        {
            try
            {
                // Define the API endpoint URL
                var apiUrl = $"https://localhost:{PORT}/transaction/GetALlTransaction";

                // Send an HTTP GET request to the API
                userTransactions = await client.GetFromJsonAsync<List<UserTransaction>>(apiUrl);

                Labels = GenerateLabels("06-2021");
                /**
                 userTransactions.ForEach(item =>
                {

                });
                 */

                break;
            }

            catch (Exception)
            {
                // Handle any other unexpected exceptions
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "The Internet?",
                        Text = "Can't connect to server, please try again!",
                        Icon = "question",

                    });
            }

        }
    }

    private async Task<List<UserTransaction>> getTransaction(string StartDay , string EndDay)
    {
        // Define the API endpoint URL
        var apiUrl = $"https://localhost:{PORT}/transaction/GetTransactionByRangeofDay?StartDay={StartDay}&EndDay={EndDay}";

        // Send an HTTP GET request to the API
        return await client.GetFromJsonAsync<List<UserTransaction>>(apiUrl);

    }

    public async void generateTransactionList(DateTime Date)
    {
        String[] DayInformation = Date.ToString("MM-yyyy").Split('-');

        DateTime startDate = new DateTime(int.Parse(DayInformation[1]), int.Parse(DayInformation[0]), 1);

        DateTime endDate = startDate.AddMonths(1).AddDays(-1);

        int startDay = startDate.Day;
        int endDay = endDate.Day;
        int current = startDay;

        Transaction_data = new List<Transaction_byWeek>();

        for(int i = 1; i <=5; i++)
        {
            if (current + 6 < endDay)
            {
                Transaction_byWeek TrBW = new Transaction_byWeek();
                TrBW.startDate = $"{current}-{int.Parse(DayInformation[0])}-{int.Parse(DayInformation[1])}";
                TrBW.endDate = $"{current + 6}-{int.Parse(DayInformation[0])}-{int.Parse(DayInformation[1])}";

                Transaction_data.Add(TrBW);
            }
            else
            {
                Transaction_byWeek TrBW = new Transaction_byWeek();
                TrBW.startDate = $"{current}-{int.Parse(DayInformation[0])}-{int.Parse(DayInformation[1])}";
                TrBW.endDate = $"{endDay}-{int.Parse(DayInformation[0])}-{int.Parse(DayInformation[1])}";

                Transaction_data.Add(TrBW);
            }
        }

        List<UserTransaction> users = await getTransaction(startDate.ToString("dd-MM-yyyy"), endDate.ToString("dd-MM-yyyy"));


        users.ForEach(item =>{
            Transaction_data.ForEach(trans =>
            {
                if (IsCurrentDayInRange(trans.startDate,trans.endDate,item.CreDate?.ToString("dd-MM-yyyy")))
                {
                    if (item.TransType.Equals("income"))
                    {
                        Transaction_byDay Tr_BD = new Transaction_byDay();
                        Tr_BD.IncomeTransaction.Add(item);
                        trans.transaction_ByDays.Add(Tr_BD);
                    }
                    else
                    {
                        Transaction_byDay Tr_BD = new Transaction_byDay();
                        Tr_BD.ExpenseTransaction.Add(item);
                        trans.transaction_ByDays.Add(Tr_BD);
                    }
                }
            });
        });
    }

    public static bool IsCurrentDayInRange(string startDay, string endDay, string currentDay)
    {
        DateTime startDate, endDate, currentDate;

        if (DateTime.TryParseExact(startDay, "dd-MM-yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out startDate)
            && DateTime.TryParseExact(endDay, "dd-MM-yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out endDate)
            && DateTime.TryParseExact(currentDay, "dd-MM-yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out currentDate))
        {
            // Check if the current day is between start and end days
            return currentDate >= startDate && currentDate <= endDate;
        }

        // If parsing fails for any date string, return false
        return false;
    }

    private void SetIncome()
    {
        TransactionType = "income";
        
    }

    private void SetExpense()
    {
        TransactionType = "expense";
    }

    public string[] GenerateLabels(string monthYear)
    {
        string[] labels = new string[5];

        // Parsing the month and year from the input string
        string[] monthYearParts = monthYear.Split('-');
        if (monthYearParts.Length != 2)
        {
            // Handle invalid input
            return labels;
        }

        if (int.TryParse(monthYearParts[0], out int month) && int.TryParse(monthYearParts[1], out int year))
        {
            DateTime startDate = new DateTime(year, month, 1);
            DateTime endDate = startDate.AddMonths(1).AddDays(-1);

            int totalDays = (endDate - startDate).Days + 1;
            int labelCount = (int)Math.Ceiling((double)totalDays / 7);

            for (int i = 0; i < 5; i++)
            {
                DateTime startLabelDay = startDate.AddDays(i * 7);
                DateTime endLabelDay = startDate.AddDays((i * 7) + 6 < totalDays ? (i * 7) + 6 : totalDays - 1);
                labels[i] = $"{startLabelDay.Day}/{startLabelDay.Month}-{endLabelDay.Day}/{endLabelDay.Month}";
            }
        }

        return labels;
    }
}
