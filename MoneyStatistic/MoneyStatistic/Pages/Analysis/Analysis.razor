@page "/Analysis"

@using MoneyStatistic.API;
@using MoneyStatistic.Database.MoneyManagerService;
@using MoneyStatistic.Database.JSON;
@using MoneyStatistic.Database.SQLiteDB;
@using MoneyStatistic.Pages.Analysis.Object;
@using System;
@using System.Globalization;


@inject userDB database ;
@inject SweetAlertService Swal;

<head>
    <link rel="stylesheet" href="./css/Analysis.css" />
    <link rel="stylesheet" href="./css/Home.css" />
    <link rel="stylesheet" href="./css/user.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css" integrity="sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css">

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />
</head>
<body>
    <div class="screen">
        <div class="container">
            <div class="transaction-type">
                @if (TransactionType.Equals("income"))
                {
                    <button class="transaction active" @onclick="SetIncome">Income</button>
                    <button class="transaction inactive" @onclick="SetExpense">Expense</button>
                }
                else
                {
                    <button class="transaction inactive" @onclick="SetIncome">Income</button>
                    <button class="transaction active" @onclick="SetExpense">Expense</button>
                }
            </div>
            <div class="transaction-analysis-container">
                <div class="transaction-list-daypicker">
                    <div class="">
                        <p class="trans-title"> Spending statistics</p>
                    </div>
                    <div>
                        <input @bind=CurrentMonth class="month-picker" @oninput="change" type="month">
                    </div>
                </div>
                <div>
                    <Chart @ref="barChart" Type="Blazorise.Charts.ChartType.Bar" TItem="double" Clicked="@OnClicked" />
                </div>
                <div class="transaction-container">
                    <div class="transaction-list-daypicker">
                        <div class="">
                            <p class="trans-title"> Transaction</p>
                        </div>
                    </div>
                    <div class="transaction-list-container-analysis">
                        @if (Transaction_data != null)
                        {
                            @foreach(var Weekittem in Transaction_data)                               
                            {
                                if (Weekittem.transaction_ByDays.Count != 0)
                                {
                                    @if (TransactionType.Equals("income") && Weekittem.numOfIncome != 0)
                                    {
                                        <div class="Transaction-analysis-weekitem-container income-border">
                                            <div class="Transaction-analysis-weekitem-title-container incomeTitle">
                                                <p class="Transaction-analysis-weekitem-weeknum">Week</p>
                                                <p class="Transaction-analysis-weekitem-title">@ConvertDateFormat(Weekittem.startDate) - @ConvertDateFormat(Weekittem.endDate) </p>
                                            </div>
                                            <div class="Transaction-analysis-weekitem-information-container">

                                                @foreach (var Dayitem in Weekittem.transaction_ByDays)
                                                {
                                                    @foreach (var trans in Dayitem.IncomeTransaction)
                                                    {
                                                        <div class="transaction-item-container divider">
                                                            <div class="transaction-item-info-container">
                                                                <div class="user-detail">
                                                                    <p class="user-name">@trans.Title</p>
                                                                    <p class="status-day">@trans.CreDate?.ToString("yyyy-MM-dd")</p>
                                                                </div>
                                                            </div>
                                                            <div class="transaction-item-amount-container">
                                                                <div class="income-transaction-item-container">
                                                                    <p class="number-style income-money">+@trans.Amount$</p>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        if (TransactionType.Equals("expense") && Weekittem.numOfExpense != 0)
                                        {
                                            <div class="Transaction-analysis-weekitem-container expense-border">
                                                <div class="Transaction-analysis-weekitem-title-container expenseTitle">
                                                        <p class="Transaction-analysis-weekitem-weeknum">Week</p>
                                                    <p class="Transaction-analysis-weekitem-title">@ConvertDateFormat(Weekittem.startDate) - @ConvertDateFormat(Weekittem.endDate) </p>
                                                </div>
                                                <div class="Transaction-analysis-weekitem-information-container">
                                                @foreach (var Dayitem in Weekittem.transaction_ByDays)
                                                {
                                                    @foreach (var trans in Dayitem.ExpenseTransaction)
                                                    {
                                                        <div class="transaction-item-container divider">
                                                            <div class="transaction-item-info-container">

                                                                <div class="user-detail">
                                                                    <p class="user-name">@trans.Title</p>
                                                                    <p class="status-day">@trans.CreDate?.ToString("yyyy-MM-dd")</p>

                                                                </div>
                                                            </div>
                                                            <div class="transaction-item-amount-container">
                                                                <div class="expense-transaction-item-container">
                                                                    <p class="number-style expense-money">-@trans.Amount$</p>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                }     
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="_content/CurrieTechnologies.Razor.SweetAlert2/sweetAlert2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.min.js" integrity="sha384-VHvPCCyXqtD5DqJeNxl2dtTyhF78xXNXdkwX1CZeRusQfRKp+tA7hAShOK/B/fQ2" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>
</body>

@functions{
    
}

@code {
    private List<UserTransaction> userTransactions { get; set; } = null;

    private List<Transaction_byWeek> Transaction_data { get; set; } = new List<Transaction_byWeek>();

    private DateTime CurrentMonth { get; set; } = DateTime.Now;

    private String TransactionType { get; set; } = "income";

    private UserLoginStatus userLoginStatus { set; get; } = null;
    //API


    Chart<double> barChart ;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        await barChart.Clear();

        await barChart.AddLabelsDatasetsAndUpdate(Labels, GetBarChartDataset());
    }

    private BarChartDataset<double> GetBarChartDataset()
    {
        if (TransactionType.Equals("expense"))
        {
            return new()
                {
                    Label = $"{TransactionType} money",
                    Data = GetData(),
                    BackgroundColor = ExpenseColors,
                    BorderColor = ExpenseborderColors,
                    BorderWidth = 1
                };
        }
        else
        {
            return new()
                {
                    Label = $"{TransactionType} money",
                    Data = GetData(),
                    BackgroundColor = IncomeColors,
                    BorderColor = IncomeborderColors,
                    BorderWidth = 1
                };
        }
    }

    public async void change(ChangeEventArgs newMonth)
    {

        while (true)
        {
            try
            {
                Labels = GenerateLabels(ChangeFormatYM_To_MY(newMonth.Value.ToString()));
                await generateTransactionList(ChangeFormatYM_To_MY(newMonth.Value.ToString()));
                await HandleRedraw();
                StateHasChanged();
                break;
            }

            catch (Exception)
            {
                // Handle any other unexpected exceptions
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "The Internet?",
                        Text = "Can't connect to server, please try again!",
                        Icon = "question",
                    });
            }
        }
    }


    string[] Labels { get; set; } = GenerateLabels(DateTime.Now.ToString("MM-yyyy"));
    List<string> ExpenseColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f)};
    List<string> ExpenseborderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f) };

    List<string> IncomeColors = new List<string> { ChartColor.FromRgba(147, 250, 165, 0.2f) };
    List<string> IncomeborderColors = new List<string> { ChartColor.FromRgba(46, 204, 113, 1f) };

    List<double> GetData()
    {
        List<double> data = new List<double>();

        if (userTransactions != null)
        {
            Transaction_data.ForEach(item =>
        {
            if (TransactionType.Equals("income"))
            {
                data.Add((double)item?.TotalIncome);
            }
            else
            {
                data.Add((double)item?.TotalExpense);
            }
        });
        }
        else
        {
            return new List<double> { 0,0,0,0,0}; 
        }

        return data;
    }

    Task OnClicked(ChartMouseEventArgs e)
    {
        var model = e.Model as BarChartModel;

        Console.WriteLine($"Handling event for {nameof(BarChartModel)}: x:{model.X} y:{model.Y}");
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        userLoginStatus = await database.GetFirstItemAsync();
        while (true)
        {
            try
            {
                await generateTransactionList(CurrentMonth.ToString("MM-yyyy"));
                Labels = GenerateLabels(CurrentMonth.ToString("MM-yyyy"));

                await HandleRedraw();
             
                break;
            }

            catch (Exception)
            {
                // Handle any other unexpected exceptions
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "The Internet?",
                        Text = "Can't connect to server, please try again!",
                        Icon = "question",

                    });
            }

        }
    }

    private async Task<List<UserTransaction>> getTransaction(string StartDay , string EndDay)
    {
        while(true) {
            try
            {
                return await APIService.getTransactionByRange(StartDay, EndDay, (decimal)userLoginStatus.Id);
                
            }
            catch (Exception)
            {
                // Handle any other unexpected exceptions
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "The Internet?",
                        Text = "Can't connect to server, please try again!",
                        Icon = "question",

                    });
            }
        }

    }

    public async Task generateTransactionList(string Date)
    {
        String[] DayInformation = Date.Split('-');

        DateTime startDate = new DateTime(int.Parse(DayInformation[1]), int.Parse(DayInformation[0]), 1);

        DateTime endDate = startDate.AddMonths(1).AddDays(-1);

        userTransactions = await getTransaction(startDate.ToString("dd-MM-yyyy"), endDate.ToString("dd-MM-yyyy"));

        int startDay = startDate.Day;
        int endDay = endDate.Day;
        int current = startDay;

        Transaction_data = new List<Transaction_byWeek>();

        for(int i = 1; i <=5; i++)
        {
            if (current + 6 < endDay)
            {
                Transaction_byWeek TrBW = new Transaction_byWeek();
                TrBW.startDate = $"{current}-{int.Parse(DayInformation[0])}-{int.Parse(DayInformation[1])}";
                TrBW.endDate = $"{current + 6}-{int.Parse(DayInformation[0])}-{int.Parse(DayInformation[1])}";
                Transaction_data.Add(TrBW);
                current = current + 7;
            }
            else
            {
                Transaction_byWeek TrBW = new Transaction_byWeek();
                TrBW.startDate = $"{current}-{int.Parse(DayInformation[0])}-{int.Parse(DayInformation[1])}";
                TrBW.endDate = $"{endDay}-{int.Parse(DayInformation[0])}-{int.Parse(DayInformation[1])}";
                Transaction_data.Add(TrBW);
                current = current + 7;
            }
        }

        //List<UserTransaction> users = await getTransaction(startDate.ToString("dd-MM-yyyy"), endDate.ToString("dd-MM-yyyy"));


        userTransactions.ForEach(item =>{
            for (int i = 0 ; i < 5; i++)
            {
                if (IsCurrentDayInRange(Transaction_data[i].startDate, Transaction_data[i].endDate, item.CreDate?.ToString("dd-MM-yyyy")))
                {
                    if (item.TransType.Equals("income"))
                    {
                        Transaction_byDay Tr_BD = new Transaction_byDay();
                        Tr_BD.IncomeTransaction.Add(item);
                        Transaction_data[i].transaction_ByDays.Add(Tr_BD);
                        Transaction_data[i].numOfIncome = Transaction_data[i].numOfIncome + 1;
                    }
                    else
                    {
                        Transaction_byDay Tr_BD = new Transaction_byDay();
                        Tr_BD.ExpenseTransaction.Add(item);
                        Transaction_data[i].transaction_ByDays.Add(Tr_BD);
                        Transaction_data[i].numOfExpense = Transaction_data[i].numOfExpense + 1;
                    }
                }
            }
        });

        for (int i = 0 ; i <5 ; i++)
        {
            Transaction_data[i].TotalWeekIncome();
            Transaction_data[i].TotalWeekExpense();
        }
    }

    public static bool IsCurrentDayInRange(string startDay, string endDay, string currentDay)
    {
        int[] startDateData = SplitDateString(startDay);
        int[] endDateData = SplitDateString(endDay);
        int[] currentDateData = SplitDateString(currentDay);

        if (currentDateData[2] >= startDateData[2] && currentDateData[2] <= endDateData[2])
        {
            // Check if the current day is between start and end days
            if (currentDateData[1] >= startDateData[1] && currentDateData[1] <= endDateData[1])
            {
                if (currentDateData[0] >= startDateData[0] && currentDateData[0] <= endDateData[0])
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }

        }
        else
        {
            return false;
        }
    }

    public static string ConvertDateFormat(string inputDateString)
    {
        String[] splitData = inputDateString.Split("-");
        return $"{splitData[0]}/{splitData[1]}/{splitData[2]}";
    }

    public static int[] SplitDateString(string dateString)
    {
        string[] dateParts = dateString.Split('-');

        if (dateParts.Length == 3 &&
            int.TryParse(dateParts[0], out int day) &&
            int.TryParse(dateParts[1], out int month) &&
            int.TryParse(dateParts[2], out int year))
        {
            return new int[] { day, month, year };
        }
        else
        {
            // Handle invalid date string
            throw new ArgumentException("Invalid date string format");
        }
    }

    private async Task SetIncome()
    {
        TransactionType = "income";
        await HandleRedraw();
    }

    private async Task SetExpense()
    {
        TransactionType = "expense";
        await HandleRedraw();
    }

    public static string[] GenerateLabels(string monthYear)
    {
        string[] labels = new string[5];

        // Parsing the month and year from the input string
        string[] monthYearParts = monthYear.Split('-');
        if (monthYearParts.Length != 2)
        {
            // Handle invalid input
            return labels;
        }

        if (int.TryParse(monthYearParts[0], out int month) && int.TryParse(monthYearParts[1], out int year))
        {
            DateTime startDate = new DateTime(year, month, 1);
            DateTime endDate = startDate.AddMonths(1).AddDays(-1);

            int totalDays = (endDate - startDate).Days + 1;
            int labelCount = (int)Math.Ceiling((double)totalDays / 7);

            for (int i = 0; i < 5; i++)
            {
                DateTime startLabelDay = startDate.AddDays(i * 7);
                DateTime endLabelDay = startDate.AddDays((i * 7) + 6 < totalDays ? (i * 7) + 6 : totalDays - 1);
                labels[i] = $"{startLabelDay.Day}/{startLabelDay.Month}-{endLabelDay.Day}/{endLabelDay.Month}";
            }
        }

        return labels;
    }

    private string ChangeFormatYM_To_MY(string current)
    {
        string[] alterMonth = current.Split("-");

        return $"{alterMonth[1]}-{alterMonth[0]}";
    }
}
